Insertion Sort:

func insertionSort( var a as array )
    for i from 1 to N
        for j from i to 1
            if a[j] < a[j-1]
                swap a[j] and a[j-1]
end func


Calculate Big O for Insertion Sort with an explanation

O (n^2) - quadratic; because you can see two for loops (one nested inside the other).


Merge Sort:

func mergeSort( var a as array )
     if ( n == 1 ) return a

     var l1 as array = a[0] ... a[n/2]
     var l2 as array = a[n/2+1] ... a[n]

     l1 = mergesort( l1 )
     l2 = mergesort( l2 )

     return merge( l1, l2 )
end func

func merge( var a as array, var b as array )
     var c as array

     while ( a and b have elements )
          if ( a[0] > b[0] )
               add b[0] to the end of c
               remove b[0] from b
          else
               add a[0] to the end of c
               remove a[0] from a
     while ( a has elements )
          add a[0] to the end of c
          remove a[0] from a
     while ( b has elements )
          add b[0] to the end of c
          remove b[0] from b
     return c
end func


Calculate Big O for Merge Sort with an explanation

O (n log(n)) - linearithmic; because merge sort uses the divide and conquer strategy (divide a list in half log(n) times). It is a recursive algorithm that continually splits a list in half and then merges (the func mergeSort). This results in a list of size n which requires n operations (the func merge). Therefore a merge sort will is an O (n log(n)) algorithm.


Selection Sort:

int i,j;

/* advance the position through the entire array */
/*   (could do j < n-1 because single element is also min element) */
for (j = 0; j < n-1; j++) {
    /* find the min element in the unsorted a[j .. n-1] */

    /* assume the min is the first element */
    int iMin = j;
    /* test against elements after j to find the smallest */
    for ( i = j+1; i < n; i++) {
        /* if this element is less, then it is the new minimum */
        if (a[i] < a[iMin]) {
            /* found new minimum; remember its index */
            iMin = i;
        }
    }

    if(iMin != j) {
        swap(a[j], a[iMin]);
    }
}


O (n^2) - quadratic; because you can see two for loops (one nested inside the other).


Quick Sort:

func quicksort(var a as array, var low as int, var high as int){
    if (low < high)
        pivotLocation = partition(A,low,high)
        quicksort(a,low, pivot_location)
        quicksort(a, pivotLocation + 1, high)


func partition(var a as array, var low as int, var high as int){
    pivot = a[low]
    leftwall = low

    for i = low + 1 to high
        if (a[i] < pivot)
            leftwall = leftwall + 1
            swap(a[i], a[leftwall])

    swap(a[low], a[leftwall])

    return (leftwall)


O (n^2) - quadratic; because it is going to pick the highest number as the pivot every time. This does a full iteration which is n. The func partition puts it together and goes through the list again which is n. So big O will be O (n^2) - worst case scenario.